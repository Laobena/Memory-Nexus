[package]
name = "memory-nexus-pipeline"
version = "2.0.0"
edition = "2021"
rust-version = "1.75"
description = "Memory Nexus Unified Adaptive Pipeline - Production-ready AI memory system"
authors = ["Memory Nexus Team"]
license = "MIT"
repository = "https://github.com/memory-nexus/pipeline"
readme = "README.md"

# Package metadata for optimizations
[package.metadata.docs.rs]
rustdoc-args = ["--cfg", "docsrs"]
targets = ["x86_64-unknown-linux-gnu"]

# Optimize for binary size in cargo install
[package.metadata.install]
bins = ["memory-nexus-pipeline", "check_features"]

# ===== BUILD PROFILES =====
# Production release build with maximum optimizations
[profile.release]
opt-level = 3                    # Maximum optimization
lto = "fat"                      # Full link-time optimization
codegen-units = 1                # Single codegen unit for best optimization
panic = "abort"                  # Smaller binary, faster panic
strip = true                     # Strip symbols for smaller binary
debug = false                    # No debug info
overflow-checks = false          # No overflow checks in release
incremental = false              # Disable incremental for best optimization
rpath = false                    # No runtime library paths

# Release with debug info for profiling
[profile.release-with-debug]
inherits = "release"
debug = true
strip = false

# Profile-Guided Optimization build
[profile.pgo]
inherits = "release"
lto = "fat"
codegen-units = 1

# BOLT optimization profile (post-link optimization)
[profile.bolt]
inherits = "release"
lto = "fat"
codegen-units = 1

# Benchmarking profile
[profile.bench]
inherits = "release"
lto = "thin"                     # Faster compilation for benchmarks
codegen-units = 1
debug = true                     # Debug info for profiling

# Standard development build
[profile.dev]
opt-level = 0
debug = 2
incremental = true
split-debuginfo = "unpacked"

# Fast development build (minimal optimization, fast compilation)
[profile.dev-fast]
inherits = "dev"
opt-level = 1                   # Minimal optimization for faster builds
debug = 0                        # No debug info
incremental = true
codegen-units = 256              # Maximum parallelism
split-debuginfo = "off"

# Testing profile with some optimizations
[profile.test]
opt-level = 2
debug = true
incremental = true

# ===== DEPENDENCIES =====
[dependencies]
# ========== CORE ASYNC RUNTIME ==========
tokio = { version = "1.47", features = ["full", "parking_lot", "test-util"] }
async-trait = "0.1"
futures = "0.3"

# ========== WEB FRAMEWORK ==========
axum = { version = "0.7", features = ["ws", "macros"] }
tower = { version = "0.5", features = ["full"] }
tower-http = { version = "0.6", features = ["cors", "trace", "compression-br", "limit"] }
hyper = { version = "1.0", features = ["full"] }

# ========== DATABASES ==========
surrealdb = { version = "2.0", features = ["protocol-ws", "rustls"] }
qdrant-client = { version = "1.15", features = ["download_snapshots"] }
redis = { version = "0.24", features = ["tokio-comp", "connection-manager", "cluster"], optional = true }

# ========== SERIALIZATION ==========
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = "1.0"
bincode = "1.3"
rkyv = { version = "0.7", features = ["validation", "strict"] }

# ========== PARALLEL PROCESSING ==========
rayon = "1.10"
crossbeam = { version = "0.8", features = ["crossbeam-channel"] }
parking_lot = { version = "0.12", features = ["arc_lock"] }
dashmap = { version = "6.0", features = ["rayon", "serde"] }

# ========== SIMD & LOW-LEVEL ==========
wide = { version = "0.7", optional = true }
bytemuck = { version = "1.14", features = ["derive"] }
aligned = { version = "0.4", optional = true }

# ========== BINARY OPERATIONS ==========
bitvec = { version = "1.0", optional = true }
bit-vec = { version = "0.6", optional = true }
roaring = { version = "0.10", optional = true }

# ========== MEMORY OPTIMIZATION ==========
memmap2 = { version = "0.9", optional = true }
bytes = "1.5"
smallvec = { version = "1.13", features = ["union", "const_generics"] }
compact_str = { version = "0.7", optional = true }

# ========== CACHING ==========
moka = { version = "0.12", features = ["future", "sync"] }
cached = { version = "0.49", features = ["async"], optional = true }

# ========== METRICS & MONITORING ==========
prometheus = { version = "0.13", features = ["process"], optional = true }
opentelemetry = { version = "0.21", optional = true }
opentelemetry-prometheus = { version = "0.14", optional = true }
metrics = "0.22"
metrics-exporter-prometheus = { version = "0.13", optional = true }

# ========== LOGGING & TRACING ==========
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
tracing-opentelemetry = { version = "0.22", optional = true }
tracing-appender = { version = "0.2", optional = true }

# ========== ERROR HANDLING ==========
anyhow = "1.0"
thiserror = "1.0"
color-eyre = { version = "0.6", optional = true }

# ========== UTILITIES ==========
uuid = { version = "1.6", features = ["v4", "fast-rng", "serde"] }
chrono = { version = "0.4", features = ["serde", "clock"] }
once_cell = "1.19"
lazy_static = "1.4"
arc-swap = "1.7"
num_cpus = "1.16"

# ========== HTTP CLIENT ==========
reqwest = { version = "0.12", features = ["json", "rustls-tls", "stream"] }
url = "2.5"

# ========== HASHING ==========
ahash = "0.8"
rustc-hash = "2.0"
xxhash-rust = { version = "0.8", features = ["xxh3"], optional = true }

# ========== ALLOCATORS (Critical for 2-4x speedup) ==========
mimalloc = { version = "0.1", default-features = false }
jemallocator = { version = "0.5" }

# ========== COMPRESSION ==========
zstd = { version = "0.13", optional = true }
lz4 = "1.24"
snap = { version = "1.1", optional = true }

# ========== CONFIGURATION ==========
toml = "0.8"
config = { version = "0.14", features = ["toml", "json", "yaml"] }

# ========== VECTOR SEARCH ==========
hnsw = { version = "0.11", optional = true }
instant-distance = { version = "0.6", optional = true }

# ========== ML/AI (Optional) ==========
candle-core = { version = "0.8", optional = true }
ort = { version = "2.0.0-rc.10", optional = true }
tokenizers = { version = "0.21", optional = true }

# ========== WORKSPACE CRATES ==========
# database-adapters = { path = "crates/database-adapters" }
# sync-engine = { path = "crates/sync-engine" }

# ===== DEV DEPENDENCIES =====
[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports", "async_tokio"] }
proptest = "1.4"
quickcheck = "1.0"
fake = "2.9"
approx = "0.5"
test-case = "3.1"
serial_test = "3.0"
pretty_assertions = "1.4"
tokio-test = "0.4"
tempfile = "3.14"

# ===== BUILD DEPENDENCIES =====
[build-dependencies]
cc = "1.0"
which = "6.0"

# ===== FEATURES =====
[features]
default = ["simd", "parallel", "binary-opt"]
full = ["simd", "parallel", "binary-opt", "memory-opt", "compression", "vector-search", "monitoring", "ml-inference", "cpu-native"]

# Core optimizations
simd = ["wide", "aligned"]
parallel = []  # Always enabled through rayon/crossbeam
binary-opt = ["bitvec", "bit-vec", "roaring"]
memory-opt = ["memmap2", "compact_str"]

# CPU-specific optimizations (detected at build time)
cpu-native = []           # Enable native CPU optimizations
avx2 = []                # AVX2 instructions (if available)
avx512 = []              # AVX512 instructions (if available)
sse42 = []               # SSE4.2 instructions (if available)
fma = []                 # Fused multiply-add (if available)
popcnt = []              # Population count (if available)
bmi2 = []                # Bit manipulation instructions 2 (if available)
neon = []                # ARM NEON (if available)

# Allocators are now always enabled (not feature-gated)
# See lib.rs for automatic selection based on target

# Advanced features
compression = ["zstd", "snap"]
vector-search = ["hnsw", "instant-distance"]
monitoring = ["prometheus", "opentelemetry", "opentelemetry-prometheus", "metrics-exporter-prometheus", "tracing-opentelemetry", "tracing-appender"]
ml-inference = ["candle-core", "ort", "tokenizers"]

# Build optimizations
pgo = []                 # Profile-Guided Optimization
bolt = []                # BOLT binary optimization
lto = []                 # Link-Time Optimization (forced)

# Additional features
profile = ["monitoring"]
xxhash = ["xxhash-rust"]
redis-cache = ["redis"]
cached-disk = ["cached/disk_store"]
debug-tools = ["color-eyre"]

# ===== WORKSPACE =====
# [workspace]
# resolver = "2"
# members = [
#     ".",
#     "crates/database-adapters",
#     "crates/sync-engine",
# ]

# [workspace.dependencies]
# # Core runtime
# tokio = { version = "1.47", default-features = false }
# async-trait = "0.1.83"
# futures = { version = "0.3.31", default-features = false, features = ["std"] }
# 
# # Serialization
# serde = { version = "1.0", features = ["derive"] }
# serde_json = "1.0"
# uuid = { version = "1.6", features = ["v4", "serde"] }
# 
# # Error handling
# thiserror = "1.0"
# anyhow = "1.0"
# 
# # Time
# chrono = { version = "0.4", features = ["serde"] }
# 
# # Logging
# tracing = "0.1"
# tracing-subscriber = { version = "0.3", features = ["env-filter"] }
# metrics = "0.22"
# 
# # Database clients
# surrealdb = { version = "2.0", features = ["protocol-ws"], default-features = false }
# qdrant-client = { version = "1.15", default-features = false, features = ["serde"] }
# 
# # Networking
# reqwest = { version = "0.12", features = ["json"], default-features = false }
# 
# # Utilities
# dashmap = "6.0"
# once_cell = "1.19"
# parking_lot = "0.12"
# 
# # Resilience
# tokio-retry = "0.3"
# backoff = { version = "0.4", features = ["tokio"] }

# # Cache
# moka = { version = "0.12.8", features = ["future"] }

# ===== BINARY TARGETS =====
[[bin]]
name = "memory-nexus-pipeline"
path = "src/main.rs"

[[bin]]
name = "check_features"
path = "src/bin/check_features.rs"

[[bench]]
name = "vector_ops"
harness = false

[[bench]]
name = "pipeline"
harness = false

[[bench]]
name = "intelligent_router"
harness = false

[[bench]]
name = "core_types"
harness = false

[[bench]]
name = "performance_validation"
harness = false