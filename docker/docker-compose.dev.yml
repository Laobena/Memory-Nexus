# Memory Nexus: Unified Adaptive Pipeline Architecture with 2025 Features
# Enhanced infrastructure with quantization, monitoring, and production features

version: '3.9'

networks:
  memory-nexus-network:
    driver: bridge

services:
  # Memory Nexus Pipeline Application with 2025 enhancements
  memory-nexus:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
      args:
        - ENABLE_AVX2=true
        - ENABLE_QUANTIZATION=true
    container_name: memory-nexus-app
    ports:
      - "8086:8086"  # Main API port
      - "9090:9090"  # Prometheus metrics port
      - "6669:6669"  # Health check endpoint
    networks:
      - memory-nexus-network
    depends_on:
      - ollama
      - qdrant
      - surrealdb
      - redis
    environment:
      # Logging
      - RUST_LOG=info,memory_nexus_pipeline=debug
      
      # Service URLs
      - OLLAMA_URL=http://ollama:11434
      - QDRANT_URL=http://qdrant:6333
      - SURREALDB_URL=ws://surrealdb:8000
      - REDIS_URL=redis://redis:6379
      
      # Server config
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8086
      
      # 2025 Features
      - ENABLE_QUANTIZATION=true
      - ENABLE_HNSW_HEALING=true
      - ENABLE_MONITORING=true
      - ENABLE_BACKUPS=true
      - ENABLE_AUDIT=true
      - BACKUP_INTERVAL_HOURS=6
      - HEALTH_CHECK_INTERVAL_SEC=30
      - CIRCUIT_BREAKER_THRESHOLD=5
      
      # Performance
      - TOKIO_WORKER_THREADS=8
      - BATCH_SIZE=100
      - CACHE_SIZE_MB=2048
      - RECENCY_DECAY_HOURS=24
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - SURREALDB_USER=root
      - SURREALDB_PASS=${SURREALDB_PASS:-nexus2025secure}
    volumes:
      - ./data:/data
      - ./backups:/var/backups/nexus
      - ./logs:/var/logs
      - ./scripts/surrealdb_schema_2025.surql:/init/schema.surql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Ollama AI Service with model management
  ollama:
    image: ollama/ollama:latest
    container_name: memory-nexus-ollama
    ports:
      - "11434:11434"
    networks:
      - memory-nexus-network
    volumes:
      - ollama-data:/root/.ollama
      - /dev/shm:/dev/shm  # Shared memory for performance
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_KEEP_ALIVE=5m
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Qdrant Vector Database with 2025 quantization features
  qdrant:
    image: qdrant/qdrant:v1.9.0
    container_name: memory-nexus-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    networks:
      - memory-nexus-network
    volumes:
      - qdrant-data:/qdrant/storage
      - qdrant-snapshots:/qdrant/snapshots
      - ./backups/qdrant:/backups
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HOST=0.0.0.0
      - QDRANT__LOG_LEVEL=INFO
      
      # Storage paths
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots
      
      # 2025 Performance optimizations
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=0
      - QDRANT__STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS=2
      - QDRANT__STORAGE__PERFORMANCE__OPTIMIZER_CPU_BUDGET=0.5
      
      # HNSW with healing
      - QDRANT__STORAGE__HNSW_INDEX__M=16
      - QDRANT__STORAGE__HNSW_INDEX__EF_CONSTRUCT=200
      - QDRANT__STORAGE__HNSW_INDEX__FULL_SCAN_THRESHOLD=10000
      
      # Quantization for 97% memory reduction
      - QDRANT__STORAGE__QUANTIZATION__ENABLED=true
      - QDRANT__STORAGE__QUANTIZATION__ALWAYS_RAM=true
      
      # WAL settings
      - QDRANT__STORAGE__WAL__WAL_CAPACITY=10000
      - QDRANT__STORAGE__WAL__WAL_SEGMENTS_AHEAD=2
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # SurrealDB Graph Database with 2025 security features
  surrealdb:
    image: surrealdb/surrealdb:v2.0.0
    container_name: memory-nexus-surrealdb
    command: >
      start 
      --log info 
      --user root 
      --pass ${SURREALDB_PASS:-nexus2025secure}
      --bind 0.0.0.0:8000
      --strict
      --auth
      file:/data
    ports:
      - "8000:8000"
    networks:
      - memory-nexus-network
    volumes:
      - surrealdb-data:/data
      - ./scripts/surrealdb_schema_2025.surql:/init.surql:ro
      - ./backups/surrealdb:/backups
    environment:
      - SURREAL_LOG=info
      - SURREAL_USER=root
      - SURREAL_PASS=${SURREALDB_PASS:-nexus2025secure}
      - SURREAL_CAPS_ALLOW_ALL=true
      - SURREAL_AUTH_LEVEL=namespace
      - SURREAL_EXPERIMENTAL_GRAPHQL=true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: memory-nexus-redis
    ports:
      - "6379:6379"
    networks:
      - memory-nexus-network
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Prometheus for metrics collection (2025 feature)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: memory-nexus-prometheus
    ports:
      - "9091:9090"
    networks:
      - memory-nexus-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Grafana for visualization (2025 feature)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: memory-nexus-grafana
    ports:
      - "3000:3000"
    networks:
      - memory-nexus-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-nexus2025}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Automated backup service (2025 feature)
  backup:
    image: alpine:latest
    container_name: memory-nexus-backup
    networks:
      - memory-nexus-network
    volumes:
      - ./backups:/backups
      - surrealdb-data:/data/surrealdb:ro
      - qdrant-data:/data/qdrant:ro
      - qdrant-snapshots:/data/qdrant-snapshots:ro
      - redis-data:/data/redis:ro
    environment:
      - BACKUP_INTERVAL_HOURS=6
      - RETENTION_DAYS=30
    command: >
      sh -c "
      apk add --no-cache tar gzip curl jq &&
      while true; do
        echo '[Backup] Starting at' $$(date) &&
        
        # Create timestamped backup directory
        TIMESTAMP=$$(date +%Y%m%d_%H%M%S) &&
        mkdir -p /backups/$$TIMESTAMP &&
        
        # Backup SurrealDB
        tar czf /backups/$$TIMESTAMP/surrealdb.tar.gz /data/surrealdb 2>/dev/null &&
        
        # Backup Qdrant
        tar czf /backups/$$TIMESTAMP/qdrant.tar.gz /data/qdrant /data/qdrant-snapshots 2>/dev/null &&
        
        # Backup Redis
        tar czf /backups/$$TIMESTAMP/redis.tar.gz /data/redis 2>/dev/null &&
        
        # Create backup manifest
        echo '{
          \"timestamp\": \"'$$TIMESTAMP'\",
          \"databases\": [\"surrealdb\", \"qdrant\", \"redis\"],
          \"size_bytes\": '$$( du -sb /backups/$$TIMESTAMP | cut -f1 )'
        }' > /backups/$$TIMESTAMP/manifest.json &&
        
        # Cleanup old backups
        find /backups -type d -name '[0-9]*' -mtime +$${RETENTION_DAYS:-30} -exec rm -rf {} + 2>/dev/null &&
        
        echo '[Backup] Completed at' $$(date) &&
        sleep $$((BACKUP_INTERVAL_HOURS * 3600))
      done
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  ollama-data:
    driver: local
  qdrant-data:
    driver: local
  qdrant-snapshots:
    driver: local
  surrealdb-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local